/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Authors: Matteo Agnoletto (EPMatt)
 *
 */

package org.rumbledb.runtime.xml;

import org.rumbledb.api.Item;
import org.rumbledb.context.DynamicContext;
import org.rumbledb.context.RuntimeStaticContext;
import org.rumbledb.items.ItemFactory;
import org.rumbledb.items.xml.ElementItem;
import org.rumbledb.runtime.AtMostOneItemLocalRuntimeIterator;
import org.rumbledb.runtime.RuntimeIterator;

import java.util.ArrayList;
import java.util.List;

/**
 * Runtime iterator for direct element constructors.
 * 
 * @see org.rumbledb.expressions.xml.DirElemConstructorExpression
 */
public class DirElemConstructorRuntimeIterator extends AtMostOneItemLocalRuntimeIterator {

    private static final long serialVersionUID = 1L;
    private String tagName;
    private List<RuntimeIterator> content;
    private List<AttributeNodeRuntimeIterator> attributes;

    public DirElemConstructorRuntimeIterator(
            String tagName,
            List<RuntimeIterator> content,
            List<AttributeNodeRuntimeIterator> attributes,
            RuntimeStaticContext staticContext
    ) {
        super(createChildList(content, attributes), staticContext);
        this.content = content;
        this.attributes = attributes;
        this.tagName = tagName;
    }

    @Override
    public Item materializeFirstItemOrNull(DynamicContext dynamicContext) {
        // Check if this is the top-level runtime iterator for XML tree building
        DynamicContext contextToUse;
        if (dynamicContext.getTopLevelRuntimeIterator() == null) {
            // This is the top-level runtime iterator - create a new context and set this iterator as top-level
            contextToUse = new DynamicContext(dynamicContext);
            contextToUse.setTopLevelRuntimeIterator(this);
        } else {
            // A top-level iterator is already set - use the provided context
            contextToUse = dynamicContext;
        }

        List<Item> content = new ArrayList<>();
        List<Item> attributes = new ArrayList<>();
        // process all child content
        if (this.content != null) {
            StringBuilder textAccumulator = null;

            for (RuntimeIterator iterator : this.content) {
                iterator.open(contextToUse);
                while (iterator.hasNext()) {
                    Item item = iterator.next();

                    // check if this item should be treated as text content
                    // both proper text nodes, or any non-node items (e.g. generated by enclosed expressions) are
                    // treated as text nodes in the context of a direct element constructor.
                    if (item.isTextNode() || !item.isNode()) {
                        String textContent;
                        if (item.isTextNode()) {
                            textContent = item.getTextValue();
                        } else {
                            // non-node item - convert to string
                            textContent = item.getStringValue();
                        }

                        // skip empty text content according to XML spec
                        if (textContent.isEmpty()) {
                            continue;
                        }

                        if (textAccumulator == null) {
                            // start accumulating text content
                            textAccumulator = new StringBuilder();
                        }

                        // accumulate the text content
                        textAccumulator.append(textContent);
                    } else {
                        // non-text node encountered
                        if (textAccumulator != null) {
                            // finalize any accumulated text content
                            content.add(
                                ItemFactory.getInstance()
                                    .createXmlTextNode(
                                        textAccumulator.toString()
                                    )
                            );
                            textAccumulator = null;
                        }

                        // add the non-text node
                        content.add(item);
                    }
                }
                iterator.close();
            }

            // handle any remaining accumulated text at the end
            if (textAccumulator != null) {
                content.add(
                    ItemFactory.getInstance()
                        .createXmlTextNode(
                            textAccumulator.toString()
                        )
                );
            }
        }
        // process attributes
        if (this.attributes != null) {
            for (RuntimeIterator iterator : this.attributes) {
                iterator.open(contextToUse);
                while (iterator.hasNext()) {
                    Item item = iterator.next();

                    // attributes should be attribute nodes
                    if (item.isAttributeNode()) {
                        attributes.add(item);
                    }
                }
                iterator.close();
            }
        }
        // create and return the element item
        this.hasNext = false;
        ElementItem elementItem = (ElementItem) ItemFactory.getInstance()
            .createXmlElementNode(
                this.tagName,
                content,
                attributes
            );
        // set the parent of the child nodes to the element node
        elementItem.addParentToDescendants();

        // Set XML document position if this is the top-level runtime iterator
        if (dynamicContext.getTopLevelRuntimeIterator() == null) {
            // This is the top-level runtime iterator - set XML document positions recursively
            // Use the hash code of the runtime iterator object as the path to track the identity of constructed objects
            String documentPath = String.valueOf(this.hashCode());
            elementItem.setXmlDocumentPosition(documentPath, 0);
        }

        return elementItem;
    }

    private static List<RuntimeIterator> createChildList(
            List<RuntimeIterator> content,
            List<AttributeNodeRuntimeIterator> attributes
    ) {
        List<RuntimeIterator> children = new ArrayList<>();
        children.addAll(content);
        children.addAll(attributes);
        return children;
    }

}
